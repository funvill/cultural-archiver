name: Deploy Production

# Deploys to publicartregistry.com only when PRs are merged to main
on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  deploy-production:
    name: Deploy to Production Environment
    # Only run if PR was merged (not just closed)
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://publicartregistry.com
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Bundle social media templates
        run: npx tsx scripts/bundle-templates.ts

      - name: Run full test suite
        run: npm run test
        
      - name: Type check
        run: npm run type-check
        
      - name: Lint check
        run: npm run lint
        continue-on-error: true
        
      - name: Build frontend
        run: npm run build:frontend
        
      - name: Build workers
        run: npm run build:workers
        
      - name: Deploy frontend to production
        run: |
          cd src/frontend
          npx wrangler deploy --env production
        env:
          CI: true
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          
      - name: Deploy workers to production
        run: |
          cd src/workers
          npx wrangler deploy --env production
        env:
          CI: true
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
      
      - name: Comment deployment status
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: 'âœ… Successfully deployed to production: https://publicartregistry.com\n\n' +
                    '**Deployment Details:**\n' +
                    `- Commit: ${context.sha}\n` +
                    `- Triggered by: @${context.actor}\n` +
                    `- Timestamp: ${new Date().toISOString()}`
            })
      
      - name: Create release tag
        uses: actions/github-script@v7
        with:
          script: |
            const tag = `production-${new Date().toISOString().split('T')[0]}-${context.sha.substring(0, 7)}`;
            github.rest.git.createRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: `refs/tags/${tag}`,
              sha: context.sha
            })
