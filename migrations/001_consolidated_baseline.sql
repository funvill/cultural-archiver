-- Cultural Archiver Database Schema (Consolidated - D1 Compatible)
-- Extracted on: 2025-09-05T16:10:00.000Z
-- Updated for D1 compatibility: 2025-01-08
-- Generated by: extract-schema.ts
-- Version: consolidated-baseline-d1-compatible

-- ================================
-- D1 COMPATIBILITY NOTES:
-- - Removed PRAGMA foreign_keys = ON (not supported)
-- - Removed WITHOUT ROWID (not supported) 
-- - Simplified CHECK constraints using length() function
-- - Foreign key constraints declared but not enforced in D1
-- ================================

-- ================================
-- Tables
-- ================================

-- Table: _cf_KV (D1 compatible - removed WITHOUT ROWID)
CREATE TABLE _cf_KV (
        key TEXT PRIMARY KEY,
        value BLOB
);

-- Table: admin_actions
CREATE TABLE admin_actions (
    id TEXT PRIMARY KEY,
    admin_uuid TEXT NOT NULL, -- admin performing the action
    action_type TEXT NOT NULL CHECK (action_type IN ('grant_permission', 'revoke_permission', 'view_audit_logs')),
    target_uuid TEXT, -- user being affected (for permission changes)
    permission_type TEXT, -- 'moderator' or 'admin' (for permission actions)
    old_value TEXT, -- previous state (JSON for complex changes)
    new_value TEXT, -- new state (JSON for complex changes)
    reason TEXT, -- reason for the action
    metadata TEXT, -- JSON: IP, user agent, session info
    created_at TEXT NOT NULL DEFAULT (datetime('now'))
);

-- Table: artwork
CREATE TABLE artwork (
    id TEXT PRIMARY KEY,
    lat REAL NOT NULL,
    lon REAL NOT NULL,
    type_id TEXT NOT NULL,
    created_at TEXT NOT NULL DEFAULT (datetime('now')),
    status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'removed')),
    tags TEXT, -- JSON object for key-value metadata like {"material": "bronze", "style": "modern"}
    FOREIGN KEY (type_id) REFERENCES artwork_types(id)
);

-- Table: artwork_types
CREATE TABLE artwork_types (
    id TEXT PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    created_at TEXT NOT NULL DEFAULT (datetime('now'))
);

-- Table: auth_sessions
CREATE TABLE auth_sessions (
    id TEXT PRIMARY KEY,  -- Session identifier (UUID)
    user_uuid TEXT NOT NULL,  -- Associated user UUID
    token_hash TEXT NOT NULL,  -- Hash of the session token for security
    created_at TEXT NOT NULL DEFAULT (datetime('now')),  -- Session creation timestamp
    last_accessed_at TEXT NOT NULL DEFAULT (datetime('now')),  -- Last access timestamp
    expires_at TEXT,  -- Session expiration (NULL for persistent sessions)
    ip_address TEXT,  -- IP address of session
    user_agent TEXT,  -- User agent of session
    is_active BOOLEAN NOT NULL DEFAULT TRUE,  -- Session active status
    device_info TEXT,  -- Optional device fingerprint/info (JSON)
    FOREIGN KEY (user_uuid) REFERENCES users(uuid) ON DELETE CASCADE
    -- Note: D1 compatible - removed length() CHECK constraint
);

-- Table: logbook
CREATE TABLE logbook (
    id TEXT PRIMARY KEY,
    artwork_id TEXT,
    user_token TEXT NOT NULL,
    note TEXT,
    photos TEXT, -- JSON array of R2 URLs like ["url1", "url2", "url3"]
    status TEXT NOT NULL DEFAULT 'pending' CHECK (status IN ('pending', 'approved', 'rejected')),
    created_at TEXT NOT NULL DEFAULT (datetime('now')), 
    lat REAL, 
    lon REAL,
    FOREIGN KEY (artwork_id) REFERENCES artwork(id) ON DELETE CASCADE
);

-- Table: magic_links
CREATE TABLE magic_links (
    token TEXT PRIMARY KEY,  -- Cryptographically secure token (32+ bytes)
    email TEXT NOT NULL,  -- Target email address
    user_uuid TEXT,  -- Associated user UUID (NULL for new account creation)
    created_at TEXT NOT NULL DEFAULT (datetime('now')),  -- Token generation timestamp
    expires_at TEXT NOT NULL,  -- Token expiration (1 hour from creation)
    used_at TEXT,  -- When token was consumed (NULL if not used)
    ip_address TEXT,  -- IP address that requested the magic link
    user_agent TEXT,  -- User agent that requested the magic link
    is_signup BOOLEAN NOT NULL DEFAULT FALSE,  -- TRUE for account creation, FALSE for login
    FOREIGN KEY (user_uuid) REFERENCES users(uuid) ON DELETE CASCADE
    -- Note: D1 compatible - removed length() CHECK constraints
);

-- Table: moderation_decisions
CREATE TABLE moderation_decisions (
    id TEXT PRIMARY KEY,
    submission_id TEXT NOT NULL, -- logbook entry ID
    moderator_uuid TEXT NOT NULL, -- who made the decision
    decision TEXT NOT NULL CHECK (decision IN ('approved', 'rejected', 'skipped')),
    reason TEXT, -- reason for rejection or notes
    metadata TEXT, -- JSON: IP, user agent, session info
    artwork_id TEXT, -- created or linked artwork ID (for approvals)
    action_taken TEXT, -- 'create_new', 'link_existing', or NULL for rejections
    photos_processed INTEGER DEFAULT 0, -- number of photos migrated
    created_at TEXT NOT NULL DEFAULT (datetime('now'))
);

-- Table: rate_limiting
CREATE TABLE rate_limiting (
    identifier TEXT NOT NULL,  -- Email address or IP address
    identifier_type TEXT NOT NULL CHECK (identifier_type IN ('email', 'ip')),  -- Type of identifier
    request_count INTEGER NOT NULL DEFAULT 0,  -- Number of requests in current window
    window_start TEXT NOT NULL DEFAULT (datetime('now')),  -- Start of current rate limit window
    last_request_at TEXT NOT NULL DEFAULT (datetime('now')),  -- Timestamp of most recent request
    blocked_until TEXT,  -- Block identifier until this time (NULL if not blocked)
    PRIMARY KEY (identifier, identifier_type),
    CONSTRAINT rate_limit_count_positive CHECK (request_count >= 0),
    CONSTRAINT rate_limit_window_valid CHECK (last_request_at >= window_start)
);

-- Table: tags
CREATE TABLE tags (
    id TEXT PRIMARY KEY,
    artwork_id TEXT,
    logbook_id TEXT,
    label TEXT NOT NULL,
    value TEXT NOT NULL,
    created_at TEXT NOT NULL DEFAULT (datetime('now')),
    FOREIGN KEY (artwork_id) REFERENCES artwork(id) ON DELETE CASCADE,
    FOREIGN KEY (logbook_id) REFERENCES logbook(id) ON DELETE CASCADE
);

-- Table: user_permissions
CREATE TABLE user_permissions (
    id TEXT PRIMARY KEY,
    user_uuid TEXT NOT NULL,
    permission TEXT NOT NULL CHECK (permission IN ('moderator', 'admin')),
    granted_by TEXT NOT NULL, -- admin user_uuid who granted this permission
    granted_at TEXT NOT NULL DEFAULT (datetime('now')),
    revoked_at TEXT NULL,
    revoked_by TEXT NULL,
    is_active INTEGER NOT NULL DEFAULT 1 CHECK (is_active IN (0, 1)),
    notes TEXT -- reason for granting/revoking
);

-- Table: users
CREATE TABLE users (
    uuid TEXT PRIMARY KEY,  -- User's claimed UUID (same as anonymous token)
    email TEXT NOT NULL UNIQUE,  -- User's email address
    created_at TEXT NOT NULL DEFAULT (datetime('now')),  -- Account creation timestamp
    last_login TEXT,  -- Last login timestamp (NULL for new accounts)
    email_verified_at TEXT,  -- When email was verified via magic link (NULL if not verified)
    status TEXT NOT NULL DEFAULT 'active' CHECK (status IN ('active', 'suspended')),  -- Account status
    CONSTRAINT users_uuid_format CHECK (uuid LIKE '________-____-4___-____-____________')  -- UUID v4 format validation
);

-- ================================
-- Indexes
-- ================================

-- Index: idx_admin_actions_admin
CREATE INDEX idx_admin_actions_admin ON admin_actions(admin_uuid);

-- Index: idx_admin_actions_created_at
CREATE INDEX idx_admin_actions_created_at ON admin_actions(created_at);

-- Index: idx_admin_actions_target
CREATE INDEX idx_admin_actions_target ON admin_actions(target_uuid) WHERE target_uuid IS NOT NULL;

-- Index: idx_admin_actions_type
CREATE INDEX idx_admin_actions_type ON admin_actions(action_type);

-- Index: idx_artwork_lat_lon
CREATE INDEX idx_artwork_lat_lon ON artwork(lat, lon);

-- Index: idx_artwork_status
CREATE INDEX idx_artwork_status ON artwork(status);

-- Index: idx_artwork_type_id
CREATE INDEX idx_artwork_type_id ON artwork(type_id);

-- Index: idx_artwork_types_name
CREATE INDEX idx_artwork_types_name ON artwork_types(name);

-- Index: idx_auth_sessions_active
CREATE INDEX idx_auth_sessions_active ON auth_sessions(is_active);

-- Index: idx_auth_sessions_expires_at
CREATE INDEX idx_auth_sessions_expires_at ON auth_sessions(expires_at);

-- Index: idx_auth_sessions_last_accessed
CREATE INDEX idx_auth_sessions_last_accessed ON auth_sessions(last_accessed_at);

-- Index: idx_auth_sessions_token_hash
CREATE INDEX idx_auth_sessions_token_hash ON auth_sessions(token_hash);

-- Index: idx_auth_sessions_user_uuid
CREATE INDEX idx_auth_sessions_user_uuid ON auth_sessions(user_uuid);

-- Index: idx_logbook_artwork_id
CREATE INDEX idx_logbook_artwork_id ON logbook(artwork_id);

-- Index: idx_logbook_lat_lon
CREATE INDEX idx_logbook_lat_lon ON logbook(lat, lon);

-- Index: idx_logbook_status
CREATE INDEX idx_logbook_status ON logbook(status);

-- Index: idx_logbook_user_token
CREATE INDEX idx_logbook_user_token ON logbook(user_token);

-- Index: idx_magic_links_created_at
CREATE INDEX idx_magic_links_created_at ON magic_links(created_at);

-- Index: idx_magic_links_email
CREATE INDEX idx_magic_links_email ON magic_links(email);

-- Index: idx_magic_links_expires_at
CREATE INDEX idx_magic_links_expires_at ON magic_links(expires_at);

-- Index: idx_magic_links_used_at
CREATE INDEX idx_magic_links_used_at ON magic_links(used_at);

-- Index: idx_moderation_decisions_artwork
CREATE INDEX idx_moderation_decisions_artwork ON moderation_decisions(artwork_id) WHERE artwork_id IS NOT NULL;

-- Index: idx_moderation_decisions_created_at
CREATE INDEX idx_moderation_decisions_created_at ON moderation_decisions(created_at);

-- Index: idx_moderation_decisions_decision
CREATE INDEX idx_moderation_decisions_decision ON moderation_decisions(decision);

-- Index: idx_moderation_decisions_moderator
CREATE INDEX idx_moderation_decisions_moderator ON moderation_decisions(moderator_uuid);

-- Index: idx_moderation_decisions_submission
CREATE INDEX idx_moderation_decisions_submission ON moderation_decisions(submission_id);

-- Index: idx_rate_limiting_blocked_until
CREATE INDEX idx_rate_limiting_blocked_until ON rate_limiting(blocked_until);

-- Index: idx_rate_limiting_identifier
CREATE INDEX idx_rate_limiting_identifier ON rate_limiting(identifier);

-- Index: idx_rate_limiting_window_start
CREATE INDEX idx_rate_limiting_window_start ON rate_limiting(window_start);

-- Index: idx_tags_artwork_id
CREATE INDEX idx_tags_artwork_id ON tags(artwork_id);

-- Index: idx_tags_label
CREATE INDEX idx_tags_label ON tags(label);

-- Index: idx_tags_logbook_id
CREATE INDEX idx_tags_logbook_id ON tags(logbook_id);

-- Index: idx_user_permissions_active
CREATE UNIQUE INDEX idx_user_permissions_active ON user_permissions(user_uuid, permission) WHERE is_active = 1;

-- Index: idx_user_permissions_granted_by
CREATE INDEX idx_user_permissions_granted_by ON user_permissions(granted_by);

-- Index: idx_user_permissions_permission
CREATE INDEX idx_user_permissions_permission ON user_permissions(permission);

-- Index: idx_user_permissions_user
CREATE INDEX idx_user_permissions_user ON user_permissions(user_uuid);

-- Index: idx_users_email
CREATE INDEX idx_users_email ON users(email);

-- Index: idx_users_last_login
CREATE INDEX idx_users_last_login ON users(last_login);

-- Index: idx_users_status
CREATE INDEX idx_users_status ON users(status);

-- ================================
-- Initial Data
-- ================================

-- Pre-populate artwork types
INSERT OR IGNORE INTO artwork_types (id, name, description) VALUES
    ('public_art', 'Public Art', 'Public art installations and commissioned works'),
    ('street_art', 'Street Art', 'Street art, murals, and graffiti'),
    ('mural', 'Mural', 'Large wall paintings and murals'),
    ('monument', 'Monument', 'Monuments, memorials, and commemorative structures'),
    ('sculpture', 'Sculpture', 'Sculptural works and installations'),
    ('installation', 'Installation', 'Art installations and interactive works'),
    ('other', 'Other', 'Other types of public artwork');
