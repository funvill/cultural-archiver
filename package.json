{
  "name": "cultural-archiver",
  "version": "1.0.0",
  "description": "A comprehensive digital archiving system for cultural events and artifacts",
  "private": true,
  "workspaces": [
    "src/frontend",
    "src/workers"
  ],
  "type": "module",
  "engines": {
    "node": ">=22.0.0"
  },
  "scripts": {
    "dev": "concurrently \"npm run dev:frontend\" \"npm run dev:workers\"",
    "devout": "powershell -Command \"npm run dev | Tee-Object out.txt\"",
    "dev:frontend": "cd src/frontend && npm run dev",
    "dev:workers": "cd src/workers && npm run dev",
    "build": "npm run build:frontend && npm run build:workers",
    "build:frontend": "cd src/frontend && npm run build",
    "build:workers": "cd src/workers && npm run build",
    "deploy": "npm run test && npm run deploy:frontend && npm run deploy:workers",
    "deploy:frontend": "cd src/frontend && npm run deploy",
    "deploy:workers": "cd src/workers && npm run deploy",
    "lint": "eslint .",
    "lint:fix": "eslint . --fix",
    "format": "prettier --write .",
    "format:check": "prettier --check .",
    "type-check": "npm run type-check:frontend && npm run type-check:workers && npm run type-check:shared",
    "type-check:frontend": "cd src/frontend && npm run type-check",
    "type-check:workers": "cd src/workers && npm run type-check",
    "type-check:shared": "tsc --noEmit --project src/shared/tsconfig.json",
    "log": "npx wrangler tail cultural-archiver-api --format pretty --env production",
    "test": "npm run test:frontend && npm run test:workers",
    "test:frontend": "cd src/frontend && npm run test",
    "test:workers": "cd src/workers && npm run test",
    "test:watch": "concurrently \"npm run test:frontend:watch\" \"npm run test:workers:watch\"",
    "test:frontend:watch": "cd src/frontend && npm run test:watch",
    "test:workers:watch": "cd src/workers && npm run test:watch",
    "test:coverage": "npm run test:frontend:coverage && npm run test:workers:coverage",
    "test:frontend:coverage": "cd src/frontend && npm run test --coverage",
    "test:workers:coverage": "cd src/workers && npm run test:coverage",
    "quality": "npm run lint && npm run type-check && npm run test",
    "setup": "npm install && npm run build",
    "database:export:prod": "powershell -Command \"$timestamp = Get-Date -Format 'yyyy-MM-dd_HHmm'; npx wrangler d1 export cultural-archiver --output _backup_database/database_production_$timestamp.sql --env production --remote --config src/workers/wrangler.toml\"",
    "database:export:dev": "powershell -Command \"$timestamp = Get-Date -Format 'yyyy-MM-dd_HHmm'; npx wrangler d1 export cultural-archiver --output _backup_database/database_development_$timestamp.sql --env development --local --config src/workers/wrangler.toml\"",
    "database:migration:prod": "npx wrangler d1 migrations apply cultural-archiver --env production --remote --config src/workers/wrangler.toml",
    "database:migration:dev": "npx wrangler d1 migrations apply cultural-archiver --env development --config src/workers/wrangler.toml",
    "database:status:prod": "npx wrangler d1 migrations list cultural-archiver --env production --config src/workers/wrangler.toml",
    "database:status:dev": "npx wrangler d1 migrations list cultural-archiver --env development --config src/workers/wrangler.toml",
    "database:create-migration": "echo 'Usage: cd src/workers && npx wrangler d1 migrations create cultural-archiver \"migration_message\" --env development'",
    "database:import:prod": "powershell -Command \"$file=$env:IMPORT_FILE; if(-not $file){ Write-Host 'Set IMPORT_FILE env var to path of .sql file'; exit 1 }; Write-Host 'IMPORT WARNING: This will execute SQL against PRODUCTION database cultural-archiver.'; $c = Read-Host 'Type YES to continue'; if($c -ne 'YES'){ Write-Host 'Aborted.'; exit 1 }; npx wrangler d1 execute cultural-archiver --env production --config src/workers/wrangler.toml --file $file\"",
    "database:import:dev": "powershell -Command \"npx wrangler d1 execute cultural-archiver --env development --local --config src/workers/wrangler.toml --command 'SELECT name FROM sqlite_master WHERE type=\\\"table\\\" AND name NOT LIKE \\\"sqlite_%\\\";' --json | ConvertFrom-Json | ForEach-Object { $_.results | ForEach-Object { \\\"DROP TABLE IF EXISTS [\\\" + $_.name + \\\"];\\\"; } } | Out-File -FilePath _backup_database/drop_tables.sql -Encoding UTF8\" && npx wrangler d1 execute cultural-archiver --env development --local --config src/workers/wrangler.toml --file _backup_database/drop_tables.sql && npx wrangler d1 execute cultural-archiver --env development --local --config src/workers/wrangler.toml",
    "database:reset:dev": "tsx scripts/reset-database.ts --env dev",
    "database:reset:prod": "tsx scripts/reset-database.ts --env prod",
    "database:reset:dev:dry-run": "tsx scripts/reset-database.ts --env dev --dry-run",
    "database:reset:prod:dry-run": "tsx scripts/reset-database.ts --env prod --dry-run"
  },
  "devDependencies": {
    "@types/archiver": "^6.0.3",
    "@typescript-eslint/eslint-plugin": "^7.0.0",
    "@typescript-eslint/parser": "^7.0.0",
    "@vue/eslint-config-typescript": "^13.0.0",
    "archiver": "^7.0.1",
    "better-sqlite3": "^12.2.0",
    "concurrently": "^9.0.0",
    "cross-env": "^10.0.0",
    "eslint": "^8.57.0",
    "eslint-plugin-vue": "^9.0.0",
    "prettier": "^3.0.0",
    "tsx": "^4.20.5",
    "typescript": "^5.6.0",
    "vue-eslint-parser": "^10.2.0",
    "wrangler": "^4.35.0"
  },
  "keywords": [
    "cultural-archiver",
    "digital-archiving",
    "cloudflare",
    "vue",
    "typescript",
    "workers"
  ],
  "author": "Steven Smethurst",
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/funvill/cultural-archiver.git"
  },
  "bugs": {
    "url": "https://github.com/funvill/cultural-archiver/issues"
  },
  "homepage": "https://github.com/funvill/cultural-archiver#readme",
  "dependencies": {
    "axios": "^1.11.0",
    "chalk": "^5.6.2",
    "dotenv": "^17.2.2",
    "inquirer": "^12.9.4",
    "ora": "^8.2.0",
    "sqlite3": "^5.1.7"
  }
}
